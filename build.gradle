buildscript {
    ext {
        // This map is by no means official. But it represents a quick
        // sampling of what our services currently have.
        bootToCloudMap = [
                '2.2.8': 'Hoxton.SR5',
                '2.2.7': 'Hoxton.SR4',
                '2.2.6': 'Hoxton.SR3',
                '2.2.5': 'Hoxton.SR2',
                '2.2.4': 'Hoxton.SR1',
                '2.1.15': 'Greenwich.SR6',
                '2.1.14': 'Greenwich.SR5',
                '2.1.13': 'Greenwich.SR5',
                '2.1.12': 'Greenwich.SR4',
                '2.1.11': 'Greenwich.SR4',
                '2.1.10': 'Greenwich.SR3',
                '2.1.9': 'Greenwich.SR3',
                '2.1.8': 'Greenwich.SR3',
                '2.1.7': 'Greenwich.SR2',
                '2.1.5': 'Greenwich.SR1',
                '2.1.4': 'Greenwich.SR1',
                '2.1.3': 'Greenwich.SR1',
                '2.1.2': 'Greenwich.RELEASE',
                '2.0.8': 'Finchley.SR2',
                '2.0.7': 'Finchley.SR2',
                '2.0.6': 'Finchley.SR2',
                '2.0.5': 'Finchley.SR1',
                '2.0.4': 'Finchley.SR1',
                '2.0.3': 'Finchley.RELEASE',
                '2.0.2': 'Finchley.RELEASE',
                '2.0.1': 'Finchley.RC1',
                '1.5.16' : 'Edgware.SR4',
                '1.5.15' : 'Edgware.SR4',
                '1.5.14' : 'Edgware.SR4',
                '1.5.13' : 'Edgware.SR3',
                '1.5.12' : 'Edgware.SR3',
                '1.5.11' : 'Edgware.SR2',
                '1.5.10' : 'Edgware.SR1',
                '1.5.9' : 'Edgware.SR1',
                '1.5.7' : 'Dalston.SR4',
                '1.5.6' : 'Dalston.SR2',
                '1.5.5' : 'Dalston.SR1',
                '1.5.4' : 'Dalston.SR1',
                '1.5.3' : 'Dalston.RELEASE',
                '1.4.7' : 'Camden.SR6',
                '1.4.4' : 'Camden.SR4'
        ]
        springBootVersion = "${boot}.RELEASE"
        springCloudVersion = bootToCloudMap[boot]
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.allogy.spring'
version = '0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    jcenter()
    if(isSpringBoot2()) {
        maven { url 'https://repo.spring.io/milestone' }
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-undertow')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.flywaydb:flyway-core')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    if(isSpringBoot2()) {
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
    } else {
        compile('org.springframework.cloud:spring-cloud-starter-eureka')
        compile('org.springframework.cloud:spring-cloud-starter-hystrix')
        compile('org.springframework.cloud:spring-cloud-starter-ribbon')
        compile('org.springframework.cloud:spring-cloud-starter-zuul')
    }
    if(isSpringBoot2()) {
        compile('org.springframework.session:spring-session-data-redis')
        compile('org.springframework.session:spring-session-jdbc')
    } else {
        compile('org.springframework.session:spring-session')
    }
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('mysql:mysql-connector-java')
    runtime('org.postgresql:postgresql')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    if(isSpringBoot2()) {
        testCompile('org.junit.jupiter:junit-jupiter-engine')
        testCompile('org.junit.jupiter:junit-jupiter-params')
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

task springBootGet(dependsOn: ['clean', 'assemble', 'check'])

def isSpringBoot2() {
    return springBootVersion.startsWith('2')
}

wrapper {
    gradleVersion = '6.4'
}
